graph = {
    '5': ['3', '7'],
    '3': ['2', '4'],
    '7': ['8'],
    '2': [],
    '4': ['8'],
    '8': []
}

visited = []  # List for visited nodes.
queue = []  # Initialize a queue


def bfs(visited, graph, node,stop_node):  # function for BFS
    visited.append(node)
    queue.append(node)

    while queue:          # Creating loop to visit each node
        m = queue.pop(0)
        print(m)
        if(m==stop_node):
            print("Goal state reached")
            exit(0)
        for n in graph[m]:
            if n not in visited:
                visited.append(n)
                queue.append(n)

# Driver Code
print("Following is the Breadth-First Search")
bfs(visited, graph, '5' ,'2')    # function calling stop node is 2









# Using a Python dictionary to act as an adjacency list
graph = {
    '5': ['3', '7'],
    '3': ['2', '4'],
    '7': ['8'],
    '2': [],
    '4': ['8'],
    '8': []
}

visited = set()  # Set to keep track of visited nodes of graph.


def dfs(visited, graph, node,stop_node):  # function for dfs
    if node not in visited:
        print(node)
        visited.add(node)
        if(node==stop_node):
            print("Goal Node Reached")
            exit(0)
        for intr in graph[node]:
            dfs(visited, graph, intr,stop_node)


# Driver Code
print("Following is the Depth-First Search")
dfs(visited, graph, '5','8') #stop node is 8